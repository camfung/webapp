basePath: /api/v1
definitions:
  api.Episode:
    properties:
      episodeNumber:
        type: integer
      episodeTMDBID:
        type: integer
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      name:
        type: string
      overview:
        type: string
      runtime:
        type: integer
      seasonNumber:
        type: integer
      stillPath:
        type: string
    type: object
  api.Message:
    properties:
      content:
        type: string
      role:
        type: string
    type: object
  api.Movie:
    properties:
      backdropImage:
        type: string
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      releaseDate:
        type: string
      runtime:
        type: integer
    type: object
  api.Season:
    properties:
      episodeCount:
        type: integer
      episodes:
        items:
          $ref: '#/definitions/api.Episode'
        type: array
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      name:
        type: string
      overview:
        type: string
      posterPath:
        type: string
      seasonNumber:
        type: integer
      seasonTMDBID:
        type: integer
    type: object
  api.TV:
    properties:
      backdropImage:
        type: string
      episodeCount:
        type: integer
      firstAirDate:
        type: string
      lastAirDate:
        type: string
      media:
        $ref: '#/definitions/db.Media'
      mediaID:
        type: integer
      seasonCount:
        type: integer
      seasons:
        items:
          $ref: '#/definitions/api.Season'
        type: array
    type: object
  db.CurrentlyWatching:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      episodeNumber:
        type: integer
      media:
        $ref: '#/definitions/db.Media'
      mediaId:
        type: integer
      seasonNumber:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  db.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  db.Media:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      genres:
        items:
          $ref: '#/definitions/db.Genre'
        type: array
      id:
        type: integer
      mediaType:
        $ref: '#/definitions/db.MediaType'
      mediaTypeId:
        type: integer
      overview:
        type: string
      posterImage:
        type: string
      title:
        type: string
      tmdbid:
        type: integer
    type: object
  db.MediaType:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Config:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        type: string
      value:
        type: string
    type: object
  models.Role:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      maxRequestCount:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      configs:
        items:
          $ref: '#/definitions/models.UserConfig'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      totalRequestCount:
        $ref: '#/definitions/models.UserTotalRequestCount'
      userRoles:
        items:
          $ref: '#/definitions/models.UserRole'
        type: array
    type: object
  models.UserConfig:
    properties:
      config:
        $ref: '#/definitions/models.Config'
      configID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.UserRole:
    properties:
      role:
        $ref: '#/definitions/models.Role'
      roleID:
        type: integer
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Optional associations for eager loading
      userID:
        type: integer
    type: object
  models.UserTotalRequestCount:
    properties:
      totalRequestCount:
        type: integer
      userID:
        type: integer
    type: object
externalDocs:
  description: OpenAPI Specification for StreamBuster
  url: https://swagger.io/resources/open-api/
host: api.streambuster.xyz
info:
  contact: {}
  description: A Streaming app inspired by the OG's
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: StreamBuster API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates a user using the provided username and password,
        and returns a JWT token in a cookie if successful.
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in, JWT set in cookie
          schema:
            type: string
        "400":
          description: Invalid username or password
          schema:
            additionalProperties: true
            type: object
      summary: Logs in valid users
      tags:
      - auth
  /auth/logout:
    post:
      description: Clear all authentication tokens from cookies and log out the user
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log out user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Register a user with email, password, first name, and last name
      parameters:
      - description: Email of the user
        in: formData
        name: email
        required: true
        type: string
      - description: Password of the user
        in: formData
        name: password
        required: true
        type: string
      - description: First name of the user
        in: formData
        name: firstName
        required: true
        type: string
      - description: Last name of the user
        in: formData
        name: lastName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: User creation failed'
          schema:
            type: string
      summary: Register a new user
      tags:
      - auth
  /cdn/movie/{tmdbId}:
    get:
      consumes:
      - application/json
      description: Retrieve HTML content for a movie based on the provided tmdbId
      parameters:
      - description: tmdbId of the movie
        in: path
        name: tmdbId
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: HTML content of the movie
          schema:
            type: string
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie content by tmdbId
      tags:
      - cdn
  /cdn/tv/{tmdbId}/{seasonNum}/{episodeNum}:
    get:
      consumes:
      - application/json
      description: Retrieve HTML content for a tv episode based on the provided tmdbId,
        season number and episode number
      parameters:
      - description: tmdbId of the movie
        in: path
        name: tmdbId
        required: true
        type: string
      - description: season number of the episode
        in: path
        name: seasonNum
        required: true
        type: number
      - description: episode number of the episode
        in: path
        name: episodeNum
        required: true
        type: number
      produces:
      - text/html
      responses:
        "200":
          description: HTML content of the movie
          schema:
            type: string
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie content by tmdbId, season number and episode number
      tags:
      - cdn
  /currently-watching/:
    post:
      consumes:
      - application/json
      description: create a new currently watching record
      parameters:
      - description: CurrentlyWatching object that needs to be created
        in: body
        name: watch
        required: true
        schema:
          $ref: '#/definitions/db.CurrentlyWatching'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new currently watching record
      tags:
      - currently-watching
    put:
      consumes:
      - application/json
      description: update a currently watching record
      parameters:
      - description: CurrentlyWatching object that needs to be updated
        in: body
        name: watch
        required: true
        schema:
          $ref: '#/definitions/db.CurrentlyWatching'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Update a currently watching record
      tags:
      - currently-watching
  /currently-watching/{mediaId}/delete:
    delete:
      description: delete a currently watching record
      parameters:
      - description: Media ID
        in: path
        name: mediaId
        required: true
        type: string
      responses:
        "204":
          description: Successfully deleted the currently watching record
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Error: Failed to delete the record'
          schema:
            additionalProperties: true
            type: object
      summary: Delete a currently watching record
      tags:
      - currently-watching
  /currently-watching/{userID}/{mediaId}/:
    get:
      consumes:
      - application/json
      description: get a currently watching record
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Media ID
        in: path
        name: mediaId
        required: true
        type: string
      - default: false
        description: Set to false to exclude soft deleted record
        in: query
        name: includeDeleted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the currently watching record
          schema:
            $ref: '#/definitions/db.CurrentlyWatching'
        "400":
          description: 'Error: Record not found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve a currently watching record
      tags:
      - currently-watching
  /currently-watching/all:
    get:
      consumes:
      - application/json
      description: get all currently watching records
      parameters:
      - default: false
        description: Set to false to exclude soft deleted records
        in: query
        name: includeDeleted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all currently watching records
          schema:
            items:
              $ref: '#/definitions/db.CurrentlyWatching'
            type: array
        "400":
          description: 'Error: Record not found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve all currently watching records for the authenticated user
      tags:
      - currently-watching
  /currently-watching/test:
    get:
      description: Endpoint to test the controller
      produces:
      - text/plain
      responses:
        "200":
          description: success
          schema:
            type: string
      summary: Test endpoint
      tags:
      - currently-watching
  /currently-watching/watchlist:
    get:
      consumes:
      - application/json
      description: get the user's watchlist
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the watchlist
          schema:
            items:
              $ref: '#/definitions/db.CurrentlyWatching'
            type: array
        "400":
          description: 'Error: Unable to retrieve watchlist'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve the watchlist
      tags:
      - currently-watching
  /llm/query:
    post:
      consumes:
      - application/json
      description: Sends a list of messages to the LLM and retrieves a response
      parameters:
      - description: Array of messages for LLM interaction
        in: body
        name: messages
        required: true
        schema:
          items:
            $ref: '#/definitions/api.Message'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Response from the LLM
          schema:
            type: object
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'Error: Failed to get response from LLM'
          schema:
            additionalProperties: true
            type: object
      summary: Query the LLM
      tags:
      - llm
  /media:
    post:
      consumes:
      - application/json
      description: create a new media record
      parameters:
      - description: Media object that needs to be created
        in: body
        name: media
        required: true
        schema:
          $ref: '#/definitions/db.Media'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created the media record
          schema:
            $ref: '#/definitions/db.Media'
        "400":
          description: 'Error: Invalid request body or creation failed'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new media record
      tags:
      - media
  /media/by-id:
    get:
      consumes:
      - application/json
      description: get a media record by its ID
      parameters:
      - description: Media ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the media record
          schema:
            $ref: '#/definitions/db.Media'
        "400":
          description: 'Error: Invalid media ID'
          schema:
            type: string
      summary: Retrieve a media record by ID
      tags:
      - media
  /media/by-tmdb-id:
    get:
      consumes:
      - application/json
      description: get a media record by its TMDB ID
      parameters:
      - description: TMDB ID
        in: query
        name: tmdb_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the media record
          schema:
            $ref: '#/definitions/db.Media'
        "400":
          description: 'Error: Invalid TMDB ID'
          schema:
            type: string
      summary: Retrieve a media record by TMDB ID
      tags:
      - media
  /movie/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a movie from TMDB using the id
      parameters:
      - description: tmdbId of the movie
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The movie record
          schema:
            $ref: '#/definitions/api.Movie'
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get movie details by id
      tags:
      - movie
  /search/multi:
    get:
      consumes:
      - application/json
      description: Get multimedia content based on the search query.
      parameters:
      - description: Search query for multimedia content
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved multimedia search results
          schema:
            items:
              type: object
            type: array
        "400":
          description: 'Error: Invalid or empty query, or no results found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve multimedia search results
      tags:
      - search
  /tv/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a tv show from TMDB using the id
      parameters:
      - description: tmdbId of the tv show
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The tv record
          schema:
            $ref: '#/definitions/api.TV'
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get tv show details by id
      tags:
      - tv
  /tv/{id}/season/{seasonNum}/episodes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of episodes in a specific season of a tv show
      parameters:
      - description: tmdbId of the tv show
        in: path
        name: id
        required: true
        type: string
      - description: the season number
        in: path
        name: seasonNum
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: The list of tv records in that season
          schema:
            items:
              $ref: '#/definitions/api.TV'
            type: array
        "400":
          description: 'Error: Unable to procure content'
          schema:
            type: object
      summary: Get episodes of a show by season number
      tags:
      - tv
  /user/:
    get:
      consumes:
      - application/json
      description: get all user records
      parameters:
      - default: false
        description: Set to true to include soft deleted users
        in: query
        name: includeDeleted
        type: boolean
      - default: false
        description: Set to true to include full user details
        in: query
        name: full
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the list of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create a new user record
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Create a new user
      tags:
      - users
  /user/{id}/:
    delete:
      consumes:
      - application/json
      description: delete a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: true
        description: Set to false to disable soft delete
        in: query
        name: softDelete
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Error: Invalid user ID'
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: false
        description: Set to true to include soft deleted user
        in: query
        name: includeDeleted
        type: boolean
      - default: false
        description: Set to true to include full user details
        in: query
        name: full
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update a user record
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: Invalid request body'
          schema:
            additionalProperties: true
            type: object
      summary: Update a user
      tags:
      - users
  /user/current:
    get:
      consumes:
      - application/json
      description: get the current user record
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the current user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve the current user
      tags:
      - users
  /user/current/:
    get:
      consumes:
      - application/json
      description: get the current user record
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved the current user
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: 'Error: No user records found'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve the current user
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
